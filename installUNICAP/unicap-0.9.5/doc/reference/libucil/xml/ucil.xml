<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="libucil-ucil">
<refmeta>
<refentrytitle role="top_of_page" id="libucil-ucil.top_of_page">ucil</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBUCIL Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>ucil</refname>
<refpurpose></refpurpose>
<!--[<xref linkend="desc" endterm="desc.title"/>]-->
</refnamediv>

<refsynopsisdiv id="libucil-ucil.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
#define             <link linkend="UCIL-FOURCC:CAPS">UCIL_FOURCC</link>                         (a,b,c,d)
typedef             <link linkend="ucil-rgb24-t">ucil_rgb24_t</link>;
typedef             <link linkend="ucil-rgb32-t">ucil_rgb32_t</link>;
typedef             <link linkend="ucil-yuv-t">ucil_yuv_t</link>;
typedef             <link linkend="ucil-y8-t">ucil_y8_t</link>;
typedef             <link linkend="ucil-color-t">ucil_color_t</link>;
<link linkend="void">void</link>                <link linkend="ucil-convolution-mask">ucil_convolution_mask</link>               (<link linkend="unicap-data-buffer-t">unicap_data_buffer_t</link> *dest,
                                                         <link linkend="unicap-data-buffer-t">unicap_data_buffer_t</link> *src,
                                                         <link linkend="ucil-convolution-mask-t">ucil_convolution_mask_t</link> *mask);
typedef             <link linkend="ucil-convolution-mask-t">ucil_convolution_mask_t</link>;
typedef             <link linkend="ucil-font-object-t">ucil_font_object_t</link>;
typedef             <link linkend="ucil-video-file-object-t">ucil_video_file_object_t</link>;
<link linkend="unicap-status-t">unicap_status_t</link>     <link linkend="ucil-check-version">ucil_check_version</link>                  (unsigned <link linkend="int">int</link> major,
                                                         unsigned <link linkend="int">int</link> minor,
                                                         unsigned <link linkend="int">int</link> micro);
<link linkend="void">void</link>                <link linkend="ucil-set-pixel">ucil_set_pixel</link>                      (<link linkend="unicap-data-buffer-t">unicap_data_buffer_t</link> *data_buffer,
                                                         <link linkend="ucil-color-t">ucil_color_t</link> *color,
                                                         <link linkend="int">int</link> x,
                                                         <link linkend="int">int</link> y);
<link linkend="void">void</link>                <link linkend="ucil-set-pixel-alpha">ucil_set_pixel_alpha</link>                (<link linkend="unicap-data-buffer-t">unicap_data_buffer_t</link> *data_buffer,
                                                         <link linkend="ucil-color-t">ucil_color_t</link> *color,
                                                         <link linkend="int">int</link> alpha,
                                                         <link linkend="int">int</link> x,
                                                         <link linkend="int">int</link> y);
<link linkend="void">void</link>                <link linkend="ucil-draw-line">ucil_draw_line</link>                      (<link linkend="unicap-data-buffer-t">unicap_data_buffer_t</link> *data_buffer,
                                                         <link linkend="ucil-color-t">ucil_color_t</link> *color,
                                                         <link linkend="int">int</link> x1,
                                                         <link linkend="int">int</link> y1,
                                                         <link linkend="int">int</link> x2,
                                                         <link linkend="int">int</link> y2);
<link linkend="void">void</link>                <link linkend="ucil-draw-rect">ucil_draw_rect</link>                      (<link linkend="unicap-data-buffer-t">unicap_data_buffer_t</link> *data_buffer,
                                                         <link linkend="ucil-color-t">ucil_color_t</link> *color,
                                                         <link linkend="int">int</link> x1,
                                                         <link linkend="int">int</link> y1,
                                                         <link linkend="int">int</link> x2,
                                                         <link linkend="int">int</link> y2);
<link linkend="void">void</link>                <link linkend="ucil-fill">ucil_fill</link>                           (<link linkend="unicap-data-buffer-t">unicap_data_buffer_t</link> *data_buffer,
                                                         <link linkend="ucil-color-t">ucil_color_t</link> *color);
<link linkend="void">void</link>                <link linkend="ucil-draw-box">ucil_draw_box</link>                       (<link linkend="unicap-data-buffer-t">unicap_data_buffer_t</link> *data_buffer,
                                                         <link linkend="ucil-color-t">ucil_color_t</link> *color,
                                                         <link linkend="int">int</link> x1,
                                                         <link linkend="int">int</link> y1,
                                                         <link linkend="int">int</link> x2,
                                                         <link linkend="int">int</link> y2);
<link linkend="void">void</link>                <link linkend="ucil-draw-circle">ucil_draw_circle</link>                    (<link linkend="unicap-data-buffer-t">unicap_data_buffer_t</link> *dest,
                                                         <link linkend="ucil-color-t">ucil_color_t</link> *color,
                                                         <link linkend="int">int</link> cx,
                                                         <link linkend="int">int</link> cy,
                                                         <link linkend="int">int</link> r);
<link linkend="ucil-font-object-t">ucil_font_object_t</link>* <link linkend="ucil-create-font-object">ucil_create_font_object</link>             (<link linkend="int">int</link> size,
                                                         const <link linkend="char">char</link> *font);
<link linkend="void">void</link>                <link linkend="ucil-draw-text">ucil_draw_text</link>                      (<link linkend="unicap-data-buffer-t">unicap_data_buffer_t</link> *dest,
                                                         <link linkend="ucil-color-t">ucil_color_t</link> *color,
                                                         <link linkend="ucil-font-object-t">ucil_font_object_t</link> *fobj,
                                                         const <link linkend="char">char</link> *text,
                                                         <link linkend="int">int</link> x,
                                                         <link linkend="int">int</link> y);
<link linkend="void">void</link>                <link linkend="ucil-destroy-font-object">ucil_destroy_font_object</link>            (<link linkend="ucil-font-object-t">ucil_font_object_t</link> *fobj);
<link linkend="void">void</link>                <link linkend="ucil-text-get-size">ucil_text_get_size</link>                  (<link linkend="ucil-font-object-t">ucil_font_object_t</link> *fobj,
                                                         const <link linkend="char">char</link> *text,
                                                         <link linkend="int">int</link> *width,
                                                         <link linkend="int">int</link> *height);
<link linkend="void">void</link>                <link linkend="ucil-get-pixel">ucil_get_pixel</link>                      (<link linkend="unicap-data-buffer-t">unicap_data_buffer_t</link> *data_buffer,
                                                         <link linkend="ucil-color-t">ucil_color_t</link> *color,
                                                         <link linkend="int">int</link> x,
                                                         <link linkend="int">int</link> y);
<link linkend="void">void</link>                <link linkend="ucil-convert-color">ucil_convert_color</link>                  (<link linkend="ucil-color-t">ucil_color_t</link> *src,
                                                         <link linkend="ucil-color-t">ucil_color_t</link> *dest);
<link linkend="unicap-status-t">unicap_status_t</link>     <link linkend="ucil-convert-buffer">ucil_convert_buffer</link>                 (<link linkend="unicap-data-buffer-t">unicap_data_buffer_t</link> *dest,
                                                         <link linkend="unicap-data-buffer-t">unicap_data_buffer_t</link> *src);
<link linkend="int">int</link>                 <link linkend="ucil-conversion-supported">ucil_conversion_supported</link>           (unsigned <link linkend="int">int</link> dest_fourcc,
                                                         unsigned <link linkend="int">int</link> src_fourcc);
<link linkend="ucil-colorspace-t">ucil_colorspace_t</link>   <link linkend="ucil-get-colorspace-from-fourcc">ucil_get_colorspace_from_fourcc</link>     (unsigned <link linkend="int">int</link> fourcc);
<link linkend="void">void</link>                <link linkend="ucil-blend-alpha">ucil_blend_alpha</link>                    (<link linkend="unicap-data-buffer-t">unicap_data_buffer_t</link> *dest,
                                                         <link linkend="unicap-data-buffer-t">unicap_data_buffer_t</link> *bg,
                                                         <link linkend="unicap-data-buffer-t">unicap_data_buffer_t</link> *fg,
                                                         <link linkend="int">int</link> alpha);
<link linkend="ucil-convolution-mask-t">ucil_convolution_mask_t</link>* <link linkend="ucil-create-convolution-mask">ucil_create_convolution_mask</link>   (unsigned <link linkend="char">char</link> *array,
                                                         <link linkend="int">int</link> size,
                                                         <link linkend="ucil-colorspace-t">ucil_colorspace_t</link> cs,
                                                         <link linkend="int">int</link> mode);
<link linkend="ucil-video-file-object-t">ucil_video_file_object_t</link>* <link linkend="ucil-create-video-file">ucil_create_video_file</link>        (const <link linkend="char">char</link> *path,
                                                         <link linkend="unicap-format-t">unicap_format_t</link> *format,
                                                         const <link linkend="char">char</link> *codec,
                                                         ...);
<link linkend="unicap-status-t">unicap_status_t</link>     <link linkend="ucil-encode-frame">ucil_encode_frame</link>                   (<link linkend="ucil-video-file-object-t">ucil_video_file_object_t</link> *vobj,
                                                         <link linkend="unicap-data-buffer-t">unicap_data_buffer_t</link> *buffer);
<link linkend="unicap-status-t">unicap_status_t</link>     <link linkend="ucil-close-video-file">ucil_close_video_file</link>               (<link linkend="ucil-video-file-object-t">ucil_video_file_object_t</link> *vobj);
<link linkend="unicap-status-t">unicap_status_t</link>     <link linkend="ucil-open-video-file">ucil_open_video_file</link>                (<link linkend="unicap-handle-t">unicap_handle_t</link> *unicap_handle,
                                                         <link linkend="char">char</link> *filename);
const <link linkend="char">char</link>*         <link linkend="ucil-get-video-file-extension">ucil_get_video_file_extension</link>       (const <link linkend="char">char</link> *codec);
</synopsis>
</refsynopsisdiv>









<refsect1 id="libucil-ucil.description" role="desc">
<title role="desc.title">Description</title>
<para>

</para>
</refsect1>

<refsect1 id="libucil-ucil.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="UCIL-FOURCC:CAPS" role="macro">
<title>UCIL_FOURCC()</title>
<indexterm zone="UCIL-FOURCC:CAPS"><primary>UCIL_FOURCC</primary></indexterm><programlisting>#define UCIL_FOURCC(a,b,c,d) (unsigned int)((((unsigned int)d)&lt;&lt;24)+(((unsigned int)c)&lt;&lt;16)+(((unsigned int)b)&lt;&lt;8)+a)
</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>a</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>b</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>c</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>d</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="ucil-rgb24-t" role="typedef">
<title>ucil_rgb24_t</title>
<indexterm zone="ucil-rgb24-t"><primary>ucil_rgb24_t</primary></indexterm><programlisting>typedef struct ucil_rgb24_t ucil_rgb24_t;
</programlisting>
<para>

</para></refsect2>
<refsect2 id="ucil-rgb32-t" role="typedef">
<title>ucil_rgb32_t</title>
<indexterm zone="ucil-rgb32-t"><primary>ucil_rgb32_t</primary></indexterm><programlisting>typedef struct ucil_rgb32_t ucil_rgb32_t;
</programlisting>
<para>

</para></refsect2>
<refsect2 id="ucil-yuv-t" role="typedef">
<title>ucil_yuv_t</title>
<indexterm zone="ucil-yuv-t"><primary>ucil_yuv_t</primary></indexterm><programlisting>typedef struct ucil_yuv_t ucil_yuv_t;
</programlisting>
<para>

</para></refsect2>
<refsect2 id="ucil-y8-t" role="typedef">
<title>ucil_y8_t</title>
<indexterm zone="ucil-y8-t"><primary>ucil_y8_t</primary></indexterm><programlisting>typedef struct ucil_y8_t ucil_y8_t;
</programlisting>
<para>

</para></refsect2>
<refsect2 id="ucil-color-t" role="typedef">
<title>ucil_color_t</title>
<indexterm zone="ucil-color-t"><primary>ucil_color_t</primary></indexterm><programlisting>typedef struct ucil_color_t ucil_color_t;
</programlisting>
<para>

</para></refsect2>
<refsect2 id="ucil-convolution-mask" role="function">
<title>ucil_convolution_mask ()</title>
<indexterm zone="ucil-convolution-mask"><primary>ucil_convolution_mask</primary></indexterm><programlisting><link linkend="void">void</link>                ucil_convolution_mask               (<link linkend="unicap-data-buffer-t">unicap_data_buffer_t</link> *dest,
                                                         <link linkend="unicap-data-buffer-t">unicap_data_buffer_t</link> *src,
                                                         <link linkend="ucil-convolution-mask-t">ucil_convolution_mask_t</link> *mask);</programlisting>
<para>
Apply a convolution mask</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dest</parameter>&nbsp;:</term>
<listitem><simpara> target buffer
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>src</parameter>&nbsp;:</term>
<listitem><simpara> source buffer
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>mask</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="ucil-convolution-mask"><type>ucil_convolution_mask</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="ucil-convolution-mask-t" role="typedef">
<title>ucil_convolution_mask_t</title>
<indexterm zone="ucil-convolution-mask-t"><primary>ucil_convolution_mask_t</primary></indexterm><programlisting>typedef struct ucil_convolution_mask_t ucil_convolution_mask_t;
</programlisting>
<para>

</para></refsect2>
<refsect2 id="ucil-font-object-t" role="typedef">
<title>ucil_font_object_t</title>
<indexterm zone="ucil-font-object-t"><primary>ucil_font_object_t</primary></indexterm><programlisting>typedef struct ucil_font_object_t ucil_font_object_t;
</programlisting>
<para>

</para></refsect2>
<refsect2 id="ucil-video-file-object-t" role="typedef">
<title>ucil_video_file_object_t</title>
<indexterm zone="ucil-video-file-object-t"><primary>ucil_video_file_object_t</primary></indexterm><programlisting>typedef struct ucil_video_file_object_t ucil_video_file_object_t;
</programlisting>
<para>

</para></refsect2>
<refsect2 id="ucil-check-version" role="function">
<title>ucil_check_version ()</title>
<indexterm zone="ucil-check-version"><primary>ucil_check_version</primary></indexterm><programlisting><link linkend="unicap-status-t">unicap_status_t</link>     ucil_check_version                  (unsigned <link linkend="int">int</link> major,
                                                         unsigned <link linkend="int">int</link> minor,
                                                         unsigned <link linkend="int">int</link> micro);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>major</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>minor</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>micro</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="ucil-set-pixel" role="function">
<title>ucil_set_pixel ()</title>
<indexterm zone="ucil-set-pixel"><primary>ucil_set_pixel</primary></indexterm><programlisting><link linkend="void">void</link>                ucil_set_pixel                      (<link linkend="unicap-data-buffer-t">unicap_data_buffer_t</link> *data_buffer,
                                                         <link linkend="ucil-color-t">ucil_color_t</link> *color,
                                                         <link linkend="int">int</link> x,
                                                         <link linkend="int">int</link> y);</programlisting>
<para>
Draws a pixel on the data buffer.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>data_buffer</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>color</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="ucil-set-pixel-alpha" role="function">
<title>ucil_set_pixel_alpha ()</title>
<indexterm zone="ucil-set-pixel-alpha"><primary>ucil_set_pixel_alpha</primary></indexterm><programlisting><link linkend="void">void</link>                ucil_set_pixel_alpha                (<link linkend="unicap-data-buffer-t">unicap_data_buffer_t</link> *data_buffer,
                                                         <link linkend="ucil-color-t">ucil_color_t</link> *color,
                                                         <link linkend="int">int</link> alpha,
                                                         <link linkend="int">int</link> x,
                                                         <link linkend="int">int</link> y);</programlisting>
<para>
Draws a pixel on the data buffer, applying an alpha ( transparency
) value to the pixel.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>data_buffer</parameter>&nbsp;:</term>
<listitem><simpara> target buffer
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>color</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="ucil-color-t"><type>ucil_color_t</type></link>. The colorspace of the color has to match
the colorspace of the data_buffer.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>alpha</parameter>&nbsp;:</term>
<listitem><simpara> the alpha value that should be applied to this pixel
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x</parameter>&nbsp;:</term>
<listitem><simpara> x position
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&nbsp;:</term>
<listitem><simpara> y position
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="ucil-draw-line" role="function">
<title>ucil_draw_line ()</title>
<indexterm zone="ucil-draw-line"><primary>ucil_draw_line</primary></indexterm><programlisting><link linkend="void">void</link>                ucil_draw_line                      (<link linkend="unicap-data-buffer-t">unicap_data_buffer_t</link> *data_buffer,
                                                         <link linkend="ucil-color-t">ucil_color_t</link> *color,
                                                         <link linkend="int">int</link> x1,
                                                         <link linkend="int">int</link> y1,
                                                         <link linkend="int">int</link> x2,
                                                         <link linkend="int">int</link> y2);</programlisting>
<para>
Draws a line on the data buffer. The endpoints are clipped to the
buffer dimensions</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>data_buffer</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>color</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x2</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y2</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="ucil-draw-rect" role="function">
<title>ucil_draw_rect ()</title>
<indexterm zone="ucil-draw-rect"><primary>ucil_draw_rect</primary></indexterm><programlisting><link linkend="void">void</link>                ucil_draw_rect                      (<link linkend="unicap-data-buffer-t">unicap_data_buffer_t</link> *data_buffer,
                                                         <link linkend="ucil-color-t">ucil_color_t</link> *color,
                                                         <link linkend="int">int</link> x1,
                                                         <link linkend="int">int</link> y1,
                                                         <link linkend="int">int</link> x2,
                                                         <link linkend="int">int</link> y2);</programlisting>
<para>
Draws a rectangle filled with color.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>data_buffer</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>color</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x2</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y2</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="ucil-fill" role="function">
<title>ucil_fill ()</title>
<indexterm zone="ucil-fill"><primary>ucil_fill</primary></indexterm><programlisting><link linkend="void">void</link>                ucil_fill                           (<link linkend="unicap-data-buffer-t">unicap_data_buffer_t</link> *data_buffer,
                                                         <link linkend="ucil-color-t">ucil_color_t</link> *color);</programlisting>
<para>
Fill the buffer with a color.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>data_buffer</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>color</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="ucil-draw-box" role="function">
<title>ucil_draw_box ()</title>
<indexterm zone="ucil-draw-box"><primary>ucil_draw_box</primary></indexterm><programlisting><link linkend="void">void</link>                ucil_draw_box                       (<link linkend="unicap-data-buffer-t">unicap_data_buffer_t</link> *data_buffer,
                                                         <link linkend="ucil-color-t">ucil_color_t</link> *color,
                                                         <link linkend="int">int</link> x1,
                                                         <link linkend="int">int</link> y1,
                                                         <link linkend="int">int</link> x2,
                                                         <link linkend="int">int</link> y2);</programlisting>
<para>
Draws a box</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>data_buffer</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>color</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x2</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y2</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="ucil-draw-circle" role="function">
<title>ucil_draw_circle ()</title>
<indexterm zone="ucil-draw-circle"><primary>ucil_draw_circle</primary></indexterm><programlisting><link linkend="void">void</link>                ucil_draw_circle                    (<link linkend="unicap-data-buffer-t">unicap_data_buffer_t</link> *dest,
                                                         <link linkend="ucil-color-t">ucil_color_t</link> *color,
                                                         <link linkend="int">int</link> cx,
                                                         <link linkend="int">int</link> cy,
                                                         <link linkend="int">int</link> r);</programlisting>
<para>
Draws a circle.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dest</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>color</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="ucil-color-t"><type>ucil_color_t</type></link>. The colorspace of the color has to match
the colorspace of the data_buffer.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cx</parameter>&nbsp;:</term>
<listitem><simpara> center of the circle ( x position )
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cy</parameter>&nbsp;:</term>
<listitem><simpara> center of the circle ( y position )
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>r</parameter>&nbsp;:</term>
<listitem><simpara> radius
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="ucil-create-font-object" role="function">
<title>ucil_create_font_object ()</title>
<indexterm zone="ucil-create-font-object"><primary>ucil_create_font_object</primary></indexterm><programlisting><link linkend="ucil-font-object-t">ucil_font_object_t</link>* ucil_create_font_object             (<link linkend="int">int</link> size,
                                                         const <link linkend="char">char</link> *font);</programlisting>
<para>
Creates a font object required for text operations. The application
must free the font object with <link linkend="ucil-destroy-font-object"><type>ucil_destroy_font_object</type></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>size</parameter>&nbsp;:</term>
<listitem><simpara> size of font in points
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>font</parameter>&nbsp;:</term>
<listitem><simpara> name of font or NULL to use default font
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a new <link linkend="ucil-font-object-t"><type>ucil_font_object_t</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="ucil-draw-text" role="function">
<title>ucil_draw_text ()</title>
<indexterm zone="ucil-draw-text"><primary>ucil_draw_text</primary></indexterm><programlisting><link linkend="void">void</link>                ucil_draw_text                      (<link linkend="unicap-data-buffer-t">unicap_data_buffer_t</link> *dest,
                                                         <link linkend="ucil-color-t">ucil_color_t</link> *color,
                                                         <link linkend="ucil-font-object-t">ucil_font_object_t</link> *fobj,
                                                         const <link linkend="char">char</link> *text,
                                                         <link linkend="int">int</link> x,
                                                         <link linkend="int">int</link> y);</programlisting>
<para>
Draws a text string onto the target buffer.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dest</parameter>&nbsp;:</term>
<listitem><simpara> target buffer
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>color</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="ucil-color-t"><type>ucil_color_t</type></link>. The colorspace of the color has to match
the colorspace of the data_buffer.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>fobj</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="ucil-font-object-t"><type>ucil_font_object_t</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>text</parameter>&nbsp;:</term>
<listitem><simpara> text string to draw
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x</parameter>&nbsp;:</term>
<listitem><simpara> x position
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&nbsp;:</term>
<listitem><simpara> y position
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="ucil-destroy-font-object" role="function">
<title>ucil_destroy_font_object ()</title>
<indexterm zone="ucil-destroy-font-object"><primary>ucil_destroy_font_object</primary></indexterm><programlisting><link linkend="void">void</link>                ucil_destroy_font_object            (<link linkend="ucil-font-object-t">ucil_font_object_t</link> *fobj);</programlisting>
<para>
Frees all resources allocated by the font object</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>fobj</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="ucil-text-get-size" role="function">
<title>ucil_text_get_size ()</title>
<indexterm zone="ucil-text-get-size"><primary>ucil_text_get_size</primary></indexterm><programlisting><link linkend="void">void</link>                ucil_text_get_size                  (<link linkend="ucil-font-object-t">ucil_font_object_t</link> *fobj,
                                                         const <link linkend="char">char</link> *text,
                                                         <link linkend="int">int</link> *width,
                                                         <link linkend="int">int</link> *height);</programlisting>
<para>
Determines the size in pixels a text string will take up when drawn
onto a buffer.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>fobj</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="ucil-font-object-t"><type>ucil_font_object_t</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>text</parameter>&nbsp;:</term>
<listitem><simpara> text string
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>width</parameter>&nbsp;:</term>
<listitem><simpara> pointer to int which will receive the width of the text
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>height</parameter>&nbsp;:</term>
<listitem><simpara> pointer to int which will receive the height of the text
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="ucil-get-pixel" role="function">
<title>ucil_get_pixel ()</title>
<indexterm zone="ucil-get-pixel"><primary>ucil_get_pixel</primary></indexterm><programlisting><link linkend="void">void</link>                ucil_get_pixel                      (<link linkend="unicap-data-buffer-t">unicap_data_buffer_t</link> *data_buffer,
                                                         <link linkend="ucil-color-t">ucil_color_t</link> *color,
                                                         <link linkend="int">int</link> x,
                                                         <link linkend="int">int</link> y);</programlisting>
<para>
Reads the pixel at position (x,y) and stores the result in <structfield>color</structfield>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>data_buffer</parameter>&nbsp;:</term>
<listitem><simpara> buffer
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>color</parameter>&nbsp;:</term>
<listitem><simpara> pointer to an <link linkend="ucil-color-t"><type>ucil_color_t</type></link> to store the result
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x</parameter>&nbsp;:</term>
<listitem><simpara> x position 
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&nbsp;:</term>
<listitem><simpara> y position
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="ucil-convert-color" role="function">
<title>ucil_convert_color ()</title>
<indexterm zone="ucil-convert-color"><primary>ucil_convert_color</primary></indexterm><programlisting><link linkend="void">void</link>                ucil_convert_color                  (<link linkend="ucil-color-t">ucil_color_t</link> *src,
                                                         <link linkend="ucil-color-t">ucil_color_t</link> *dest);</programlisting>
<para>
Convert colors between colorspaces. The
<structfield>colorspace</structfield> field of
<structname>dest</structname> needs to be set to the target
colorspace, like in this example:
</para>
<para>
<informalexample>
 <programlisting>
src.colorspace = UCIL_COLORSPACE_RGB24;
src.rgb24.r = 0xff;
src.rgb24.g = 0xff;
src.rgb24.b = 0xff;
dest.colorspace = UCIL_COLORSPACE_YUV;
ucil_convert_color( &amp;dest, &amp;src );
 </programlisting>
</informalexample></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>src</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dest</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="ucil-convert-buffer" role="function">
<title>ucil_convert_buffer ()</title>
<indexterm zone="ucil-convert-buffer"><primary>ucil_convert_buffer</primary></indexterm><programlisting><link linkend="unicap-status-t">unicap_status_t</link>     ucil_convert_buffer                 (<link linkend="unicap-data-buffer-t">unicap_data_buffer_t</link> *dest,
                                                         <link linkend="unicap-data-buffer-t">unicap_data_buffer_t</link> *src);</programlisting>
<para>
Convert the colorspace of a data buffer. The colorspaces are
denoted by the <structfield>buffer.format.fourcc</structfield>
field. The dest->format.fourcc gets set to the correct value.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dest</parameter>&nbsp;:</term>
<listitem><simpara> target buffer
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>src</parameter>&nbsp;:</term>
<listitem><simpara> source buffer
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> STATUS_SUCCESS if the buffer could be converted
successfully. STATUS_FAILURE if no conversion exists.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="ucil-conversion-supported" role="function">
<title>ucil_conversion_supported ()</title>
<indexterm zone="ucil-conversion-supported"><primary>ucil_conversion_supported</primary></indexterm><programlisting><link linkend="int">int</link>                 ucil_conversion_supported           (unsigned <link linkend="int">int</link> dest_fourcc,
                                                         unsigned <link linkend="int">int</link> src_fourcc);</programlisting>
<para>
Tests whether a specific conversion is supported.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dest_fourcc</parameter>&nbsp;:</term>
<listitem><simpara> target fourcc
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>src_fourcc</parameter>&nbsp;:</term>
<listitem><simpara> source fourcc
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> 1 when the conversion is supported
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="ucil-get-colorspace-from-fourcc" role="function">
<title>ucil_get_colorspace_from_fourcc ()</title>
<indexterm zone="ucil-get-colorspace-from-fourcc"><primary>ucil_get_colorspace_from_fourcc</primary></indexterm><programlisting><link linkend="ucil-colorspace-t">ucil_colorspace_t</link>   ucil_get_colorspace_from_fourcc     (unsigned <link linkend="int">int</link> fourcc);</programlisting>
<para>
Gets the <link linkend="ucil-colorspace-t"><type>ucil_colorspace_t</type></link> that matches the fourcc.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>fourcc</parameter>&nbsp;:</term>
<listitem><simpara> fourcc
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> an <link linkend="ucil-colorspace-t"><type>ucil_colorspace_t</type></link>. This is UCIL_COLORSPACE_UNKNOWN
when no conversion exists.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="ucil-blend-alpha" role="function">
<title>ucil_blend_alpha ()</title>
<indexterm zone="ucil-blend-alpha"><primary>ucil_blend_alpha</primary></indexterm><programlisting><link linkend="void">void</link>                ucil_blend_alpha                    (<link linkend="unicap-data-buffer-t">unicap_data_buffer_t</link> *dest,
                                                         <link linkend="unicap-data-buffer-t">unicap_data_buffer_t</link> *bg,
                                                         <link linkend="unicap-data-buffer-t">unicap_data_buffer_t</link> *fg,
                                                         <link linkend="int">int</link> alpha);</programlisting>
<para>
Blends two buffers into a target buffer. Colorspaces of buffers
should match.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dest</parameter>&nbsp;:</term>
<listitem><simpara> target buffer
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>bg</parameter>&nbsp;:</term>
<listitem><simpara> background buffer
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>fg</parameter>&nbsp;:</term>
<listitem><simpara> foreground buffer
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>alpha</parameter>&nbsp;:</term>
<listitem><simpara> transparency value
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="ucil-create-convolution-mask" role="function">
<title>ucil_create_convolution_mask ()</title>
<indexterm zone="ucil-create-convolution-mask"><primary>ucil_create_convolution_mask</primary></indexterm><programlisting><link linkend="ucil-convolution-mask-t">ucil_convolution_mask_t</link>* ucil_create_convolution_mask   (unsigned <link linkend="char">char</link> *array,
                                                         <link linkend="int">int</link> size,
                                                         <link linkend="ucil-colorspace-t">ucil_colorspace_t</link> cs,
                                                         <link linkend="int">int</link> mode);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>array</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>size</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cs</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>mode</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="ucil-create-video-file" role="function">
<title>ucil_create_video_file ()</title>
<indexterm zone="ucil-create-video-file"><primary>ucil_create_video_file</primary></indexterm><programlisting><link linkend="ucil-video-file-object-t">ucil_video_file_object_t</link>* ucil_create_video_file        (const <link linkend="char">char</link> *path,
                                                         <link linkend="unicap-format-t">unicap_format_t</link> *format,
                                                         const <link linkend="char">char</link> *codec,
                                                         ...);</programlisting>
<para>
Creates a video file to be used for video recording. After
creation, add frames to the video file with <link linkend="ucil-encode-frame"><type>ucil_encode_frame</type></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>path</parameter>&nbsp;:</term>
<listitem><simpara> filename with full path
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&nbsp;:</term>
<listitem><simpara> image format of individual frames
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>codec</parameter>&nbsp;:</term>
<listitem><simpara> codec name or NULL to use default codec
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> A new <link linkend="ucil-video-file-object-t"><type>ucil_video_file_object_t</type></link> or NULL on error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="ucil-encode-frame" role="function">
<title>ucil_encode_frame ()</title>
<indexterm zone="ucil-encode-frame"><primary>ucil_encode_frame</primary></indexterm><programlisting><link linkend="unicap-status-t">unicap_status_t</link>     ucil_encode_frame                   (<link linkend="ucil-video-file-object-t">ucil_video_file_object_t</link> *vobj,
                                                         <link linkend="unicap-data-buffer-t">unicap_data_buffer_t</link> *buffer);</programlisting>
<para>
Adds a frame to a video file.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>vobj</parameter>&nbsp;:</term>
<listitem><simpara> a video file object
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buffer</parameter>&nbsp;:</term>
<listitem><simpara> data buffer
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> STATUS_SUCCESS if the frame got added successfully.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="ucil-close-video-file" role="function">
<title>ucil_close_video_file ()</title>
<indexterm zone="ucil-close-video-file"><primary>ucil_close_video_file</primary></indexterm><programlisting><link linkend="unicap-status-t">unicap_status_t</link>     ucil_close_video_file               (<link linkend="ucil-video-file-object-t">ucil_video_file_object_t</link> *vobj);</programlisting>
<para>
Close a video file created with <link linkend="ucil-create-video-file"><type>ucil_create_video_file</type></link></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>vobj</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="ucil-video-file-object"><type>ucil_video_file_object</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="ucil-open-video-file" role="function">
<title>ucil_open_video_file ()</title>
<indexterm zone="ucil-open-video-file"><primary>ucil_open_video_file</primary></indexterm><programlisting><link linkend="unicap-status-t">unicap_status_t</link>     ucil_open_video_file                (<link linkend="unicap-handle-t">unicap_handle_t</link> *unicap_handle,
                                                         <link linkend="char">char</link> *filename);</programlisting>
<para>
Opens a video file for playback. The resulting handle can be used
like a video capture device.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>unicap_handle</parameter>&nbsp;:</term>
<listitem><simpara> pointer to an <link linkend="unicap-handle-t"><type>unicap_handle_t</type></link> where the new handle
gets stored. 
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>filename</parameter>&nbsp;:</term>
<listitem><simpara> full path of the video file
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="ucil-get-video-file-extension" role="function">
<title>ucil_get_video_file_extension ()</title>
<indexterm zone="ucil-get-video-file-extension"><primary>ucil_get_video_file_extension</primary></indexterm><programlisting>const <link linkend="char">char</link>*         ucil_get_video_file_extension       (const <link linkend="char">char</link> *codec);</programlisting>
<para>
Get the file extension of a codec. Eg. for the "ogg/theora" codec,
this will return "ogg". The returned string is owned by ucil and
should not be freed.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>codec</parameter>&nbsp;:</term>
<listitem><simpara> codec name
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> string
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
